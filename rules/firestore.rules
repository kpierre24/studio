
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'SuperAdmin';
    }

    function isTeacher() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Teacher';
    }

    function isStudent() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Student';
    }

    function isTeacherOfCourse(courseId) {
      let course = get(/databases/$(database)/documents/courses/$(courseId)).data;
      return request.auth.uid == course.teacherId;
    }

    function isEnrolledInCourse(courseId) {
      // Check if an enrollment document exists for the user and course
      // Path: /enrollments/enroll-{courseId}-{userId}
      return exists(/databases/$(database)/documents/enrollments/$(strCat(['enroll-', courseId, '-', request.auth.uid])));
    }
    
    function strCat(parts) {
      return parts.join('');
    }

    // Users Collection
    match /users/{userId} {
      allow read: if request.auth != null; // Any authenticated user can read user profiles (for names, avatars etc.)
      allow list: if isAdmin(); // Only admins can list all users
      allow create: if isAdmin(); // Only admins can create users directly here (registration is separate)
      allow update: if request.auth.uid == userId || isAdmin(); // Users can update their own profile, admins can update any
      allow delete: if isAdmin(); // Only admins can delete users
    }

    // Courses Collection
    match /courses/{courseId} {
      allow read: if request.auth != null; // Authenticated users can read course details
      allow list: if request.auth != null; // Authenticated users can list courses
      allow create: if isAdmin() || isTeacher(); // Admins or Teachers can create courses
      allow update: if isAdmin() || isTeacherOfCourse(courseId); // Admins or the teacher of the course can update
      allow delete: if isAdmin(); // Only admins can delete courses

      // Lessons Subcollection
      match /lessons/{lessonId} {
        allow read: if request.auth != null && (isAdmin() || isTeacherOfCourse(courseId) || isEnrolledInCourse(courseId));
        allow list: if request.auth != null && (isAdmin() || isTeacherOfCourse(courseId) || isEnrolledInCourse(courseId));
        allow create, update, delete: if isAdmin() || isTeacherOfCourse(courseId);
      }

      // Assignments Subcollection
      match /assignments/{assignmentId} {
        allow read: if request.auth != null && (isAdmin() || isTeacherOfCourse(courseId) || isEnrolledInCourse(courseId));
        allow list: if request.auth != null && (isAdmin() || isTeacherOfCourse(courseId) || isEnrolledInCourse(courseId));
        allow create, update, delete: if isAdmin() || isTeacherOfCourse(courseId);

        // Submissions Subcollection
        match /submissions/{submissionId} {
          allow read: if request.auth != null && (isAdmin() || isTeacherOfCourse(courseId) || request.auth.uid == resource.data.studentId);
          allow list: if request.auth != null && (isAdmin() || isTeacherOfCourse(courseId)); // Teachers/Admins list all for an assignment
          allow create: if request.auth != null && request.auth.uid == request.resource.data.studentId && isEnrolledInCourse(courseId);
          allow update: if isAdmin() || isTeacherOfCourse(courseId); // For grading
          allow delete: if isAdmin() || isTeacherOfCourse(courseId);
        }
      }
      // Course Day Schedule Subcollection
      match /schedule/{scheduleId} { // scheduleId is YYYY-MM-DD
        allow read: if request.auth != null && (isAdmin() || isTeacherOfCourse(courseId) || isEnrolledInCourse(courseId));
        allow list: if request.auth != null && (isAdmin() || isTeacherOfCourse(courseId) || isEnrolledInCourse(courseId));
        allow create, update, delete: if isAdmin() || isTeacherOfCourse(courseId);
      }
    }

    // Enrollments Collection
    match /enrollments/{enrollmentId} {
      allow read: if request.auth != null && (isAdmin() || isTeacherOfCourse(resource.data.courseId) || request.auth.uid == resource.data.studentId);
      allow list: if request.auth != null && (isAdmin() || isTeacher()); // Teachers can list to find their students, Admin lists all. Student queries specific to their ID.
      allow create, update, delete: if isAdmin(); // Admins manage enrollments directly
    }

    // AttendanceRecords Collection
    match /attendanceRecords/{recordId} {
      allow read: if request.auth != null && (isAdmin() || isTeacherOfCourse(resource.data.courseId) || request.auth.uid == resource.data.studentId);
      // For list, students MUST query by their own studentId. Teachers/Admins can list all.
      allow list: if request.auth != null && 
                    (isAdmin() || isTeacher() || 
                     (isStudent() && request.query.getRules().map(rule, rule.field == 'studentId' && rule.value == request.auth.uid).hasAny()));
      allow create: if isAdmin() || isTeacherOfCourse(request.resource.data.courseId);
      allow update: if isAdmin() || isTeacherOfCourse(resource.data.courseId); // Allow update if teacher of the course
      allow delete: if isAdmin();
    }

    // Payments Collection
    match /payments/{paymentId} {
      allow read: if request.auth != null && (isAdmin() || request.auth.uid == resource.data.studentId);
      allow list: if request.auth != null && 
                    (isAdmin() || 
                     (isStudent() && request.query.getRules().map(rule, rule.field == 'studentId' && rule.value == request.auth.uid).hasAny()));
      allow create, update, delete: if isAdmin();
    }

    // Notifications Collection
    match /notifications/{notificationId} {
      allow read, list: if request.auth != null && request.auth.uid == resource.data.userId; // Users read their own
      allow create, update, delete: if isAdmin(); // Admins manage notifications
    }

    // Announcements Collection
    match /announcements/{announcementId} {
      allow read, list: if request.auth != null; // All authenticated users can read announcements
      allow create, update, delete: if isAdmin() || isTeacher(); // Admins and Teachers can create announcements
    }

    // DirectMessages Collection
    match /directMessages/{messageId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == resource.data.senderId || 
                      request.auth.uid == resource.data.recipientId || 
                      isAdmin());
      // For list, users must query by senderId or recipientId. Admins can list broadly for moderation if needed.
      allow list: if request.auth != null && 
                    (isAdmin() || 
                     request.query.getRules().map(rule, 
                       (rule.field == 'senderId' && rule.value == request.auth.uid) || 
                       (rule.field == 'recipientId' && rule.value == request.auth.uid)
                     ).hasAny());
      allow create: if request.auth != null && request.auth.uid == request.resource.data.senderId;
      // Allow recipient to update 'read' status
      allow update: if request.auth != null && 
                       request.auth.uid == resource.data.recipientId && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
      allow delete: if isAdmin() || request.auth.uid == resource.data.senderId; // Sender or admin can delete
    }
  }
}
