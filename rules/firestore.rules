
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user data
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Helper function to check if user is a teacher for a specific course
    function isTeacherForCourse(courseId) {
      let course = get(/databases/$(database)/documents/courses/$(courseId)).data;
      return request.auth.uid == course.teacherId;
    }

    // User Profiles
    match /users/{userId} {
      allow read: if request.auth.uid != null; // Authenticated users can read user profiles (e.g., teacher names)
      allow create: if request.auth.uid == userId || getUserData(request.auth.uid).role == 'SuperAdmin'; // User can create their own, Admin can create any
      allow update: if request.auth.uid == userId || getUserData(request.auth.uid).role == 'SuperAdmin'; // User can update their own, Admin can update any
      allow delete: if getUserData(request.auth.uid).role == 'SuperAdmin'; // Only SuperAdmin can delete
    }

    // Courses and their subcollections
    match /courses/{courseId} {
      allow read: if request.auth.uid != null; // Authenticated users can read course details
      allow list: if request.auth.uid != null; // Authenticated users can list courses
      allow create: if request.auth.uid != null && (getUserData(request.auth.uid).role == 'Teacher' || getUserData(request.auth.uid).role == 'SuperAdmin');
      allow update: if request.auth.uid != null && (isTeacherForCourse(courseId) || getUserData(request.auth.uid).role == 'SuperAdmin');
      allow delete: if request.auth.uid != null && (isTeacherForCourse(courseId) || getUserData(request.auth.uid).role == 'SuperAdmin');

      // Lessons subcollection
      match /lessons/{lessonId} {
        allow read: if request.auth.uid != null && (
                        getUserData(request.auth.uid).role == 'SuperAdmin' ||
                        isTeacherForCourse(courseId) ||
                        (getUserData(request.auth.uid).role == 'Student' && courseId in getUserData(request.auth.uid).enrolledCourseIds) // Assumes student doc has enrolledCourseIds
                        // Alternative for student read: check enrollments collection
                        || (getUserData(request.auth.uid).role == 'Student' && exists(/databases/$(database)/documents/enrollments/$(request.auth.uid + '_' + courseId)))
                      );
        allow list: if request.auth.uid != null && (
                        getUserData(request.auth.uid).role == 'SuperAdmin' ||
                        isTeacherForCourse(courseId) ||
                        (getUserData(request.auth.uid).role == 'Student' && exists(/databases/$(database)/documents/enrollments/$(request.auth.uid + '_' + courseId)))
                      );
      allow create, update, delete: if request.auth.uid != null && (isTeacherForCourse(courseId) || getUserData(request.auth.uid).role == 'SuperAdmin');
      }

      // Assignments subcollection
      match /assignments/{assignmentId} {
        allow read: if request.auth.uid != null && (
                        getUserData(request.auth.uid).role == 'SuperAdmin' ||
                        isTeacherForCourse(courseId) ||
                        (getUserData(request.auth.uid).role == 'Student' && exists(/databases/$(database)/documents/enrollments/$(request.auth.uid + '_' + courseId)))
                      );
        allow list: if request.auth.uid != null && (
                        getUserData(request.auth.uid).role == 'SuperAdmin' ||
                        isTeacherForCourse(courseId) ||
                        (getUserData(request.auth.uid).role == 'Student' && exists(/databases/$(database)/documents/enrollments/$(request.auth.uid + '_' + courseId)))
                      );
        allow create, update, delete: if request.auth.uid != null && (isTeacherForCourse(courseId) || getUserData(request.auth.uid).role == 'SuperAdmin');

        // Submissions subcollection
        match /submissions/{submissionId} {
          allow read: if request.auth.uid != null && (
                          getUserData(request.auth.uid).role == 'SuperAdmin' ||
                          isTeacherForCourse(courseId) ||
                          resource.data.studentId == request.auth.uid
                        );
          allow list: if request.auth.uid != null && ( // Teachers and Admins can list all for an assignment
                          getUserData(request.auth.uid).role == 'SuperAdmin' ||
                          isTeacherForCourse(courseId)
                        );
           allow list: if request.auth.uid != null && // Students can list their own submission for an assignment
                          request.query.filters[0][0] == 'studentId' && request.query.filters[0][2] == request.auth.uid;
          allow create: if request.auth.uid != null && getUserData(request.auth.uid).role == 'Student' && request.resource.data.studentId == request.auth.uid;
          allow update: if request.auth.uid != null && (isTeacherForCourse(courseId) || getUserData(request.auth.uid).role == 'SuperAdmin'); // For grading
          allow delete: if request.auth.uid != null && (isTeacherForCourse(courseId) || getUserData(request.auth.uid).role == 'SuperAdmin');
        }
      }
       // Schedule subcollection for a course
      match /schedule/{dateId} { // dateId is YYYY-MM-DD
        allow read: if request.auth.uid != null; // All authenticated users can read schedules
        allow list: if request.auth.uid != null;
        allow create, update, delete: if request.auth.uid != null && (isTeacherForCourse(courseId) || getUserData(request.auth.uid).role == 'SuperAdmin');
      }
    }

    // Enrollments
    match /enrollments/{enrollmentId} {
      allow read: if request.auth.uid != null && (
                      getUserData(request.auth.uid).role == 'SuperAdmin' ||
                      getUserData(request.auth.uid).role == 'Teacher' || // Teachers might need to see enrollments broadly
                      request.auth.uid == resource.data.studentId
                    );
      allow list: if request.auth.uid != null && (
                      getUserData(request.auth.uid).role == 'SuperAdmin' ||
                      getUserData(request.auth.uid).role == 'Teacher'
                    );
       allow list: if request.auth.uid != null && request.query.getRules().size() == 1 && request.query.getRules()[0].field == 'studentId' && request.query.getRules()[0].value == request.auth.uid;

      allow create, update, delete: if request.auth.uid != null && getUserData(request.auth.uid).role == 'SuperAdmin';
    }

    // Attendance Records
    match /attendanceRecords/{recordId} {
      allow read: if request.auth.uid != null && (
                      getUserData(request.auth.uid).role == 'SuperAdmin' ||
                      (getUserData(request.auth.uid).role == 'Teacher' && isTeacherForCourse(get(/databases/$(database)/documents/attendanceRecords/$(recordId)).data.courseId)) ||
                      request.auth.uid == resource.data.studentId
                    );
      allow create: if request.auth.uid != null && (
                      getUserData(request.auth.uid).role == 'SuperAdmin' ||
                      (getUserData(request.auth.uid).role == 'Teacher' && isTeacherForCourse(request.resource.data.courseId))
                    );
      allow update, delete: if request.auth.uid != null && (
                      getUserData(request.auth.uid).role == 'SuperAdmin' ||
                      (getUserData(request.auth.uid).role == 'Teacher' && isTeacherForCourse(get(/databases/$(database)/documents/attendanceRecords/$(recordId)).data.courseId))
                    );
    }
     match /attendanceRecords {
        // Admins and Teachers can list all (teachers filter client-side or specific page queries)
        allow list: if request.auth.uid != null && (getUserData(request.auth.uid).role == 'SuperAdmin' || getUserData(request.auth.uid).role == 'Teacher');
        // Students can list records ONLY IF the query specifically filters by their studentId
        allow list: if request.auth.uid != null && request.query.getRules().size() > 0 && request.query.getRules().map(rule, rule.field == 'studentId' && rule.value == request.auth.uid).hasAny();
    }


    // Payments
    match /payments/{paymentId} {
      allow read: if request.auth.uid != null && (
                      getUserData(request.auth.uid).role == 'SuperAdmin' ||
                      request.auth.uid == resource.data.studentId
                    );
      allow list: if request.auth.uid != null && getUserData(request.auth.uid).role == 'SuperAdmin';
      allow list: if request.auth.uid != null && request.query.getRules().size() == 1 && request.query.getRules()[0].field == 'studentId' && request.query.getRules()[0].value == request.auth.uid;
      allow create, update, delete: if request.auth.uid != null && getUserData(request.auth.uid).role == 'SuperAdmin';
    }

    // Notifications
    match /notifications/{notificationId} {
      allow read, update: if request.auth.uid != null && request.auth.uid == resource.data.userId; // Users can read/update their own notifications
      allow list: if request.auth.uid != null && request.query.getRules().size() == 1 && request.query.getRules()[0].field == 'userId' && request.query.getRules()[0].value == request.auth.uid;
      allow create: if request.auth.uid != null && (getUserData(request.auth.uid).role == 'SuperAdmin' || getUserData(request.auth.uid).role == 'Teacher'); // System/Admin/Teacher can create
      allow delete: if request.auth.uid != null && request.auth.uid == resource.data.userId; // User can delete their own
    }

    // Announcements
    match /announcements/{announcementId} {
      allow read: if request.auth.uid != null; // All authenticated users can read announcements
      allow list: if request.auth.uid != null;
      allow create, update, delete: if request.auth.uid != null && (getUserData(request.auth.uid).role == 'SuperAdmin' || getUserData(request.auth.uid).role == 'Teacher');
    }

    // Direct Messages
    match /directMessages/{messageId} {
      allow read: if request.auth.uid != null && (request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.recipientId);
      allow list: if request.auth.uid != null && (
                    (request.query.getRules().map(rule, rule.field == 'senderId' && rule.value == request.auth.uid).hasAny()) ||
                    (request.query.getRules().map(rule, rule.field == 'recipientId' && rule.value == request.auth.uid).hasAny())
                  );
      allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.senderId;
      allow update: if request.auth.uid != null && request.auth.uid == request.resource.data.recipientId && request.resource.data.read == true; // Only recipient can mark as read
      // No delete for now, or implement soft delete
    }
  }
}

    