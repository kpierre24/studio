
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserRole() {
      if (!isAuthenticated()) {
        return ''; // Return an empty string or a non-role string if not authenticated
      }
      // Ensure user document exists and has a role property before accessing it
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      if (userDoc.data == null || !('role' in userDoc.data)) {
        return ''; // User document doesn't exist or no role property
      }
      return userDoc.data.role;
    }

    function isSuperAdmin() {
      return getUserRole() == 'SuperAdmin';
    }

    function isTeacher() {
      return getUserRole() == 'Teacher';
    }

    function isStudent() {
      return getUserRole() == 'Student';
    }

    // Checks if the authenticated user is the teacher of the specified course.
    function isTeacherOfCourse(courseId) {
      let courseDoc = get(/databases/$(database)/documents/courses/$(courseId));
      return isAuthenticated() && courseDoc.data != null && request.auth.uid == courseDoc.data.teacherId;
    }

    // Checks if the authenticated user is enrolled in the specified course.
    // Assumes course document has a 'studentIds' array field.
    function isEnrolledInCourse(courseId) {
      let courseDoc = get(/databases/$(database)/documents/courses/$(courseId));
      return isAuthenticated() && courseDoc.data != null && request.auth.uid in courseDoc.data.studentIds;
    }

    // --- Path Rules ---

    // Users Collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isSuperAdmin(); // Only SuperAdmin can create users directly here. Student registration handled by app logic (potentially a Cloud Function).
      allow update: if isSuperAdmin() || (isAuthenticated() && request.auth.uid == userId); // SuperAdmin or user themselves.
      allow delete: if isSuperAdmin() && request.auth.uid != userId; // SuperAdmin can delete any user except themselves.
    }

    // Courses Collection
    match /courses/{courseId} {
      allow read: if isAuthenticated();
      allow create: if isSuperAdmin() || isTeacher(); // SuperAdmin or any authenticated Teacher can create courses.
      allow update: if isSuperAdmin() || isTeacherOfCourse(courseId); // SuperAdmin or the teacher of this specific course.
      allow delete: if isSuperAdmin(); // Only SuperAdmin can delete courses for now.

      // Lessons Subcollection
      match /lessons/{lessonId} {
        allow read: if isAuthenticated() && (isEnrolledInCourse(courseId) || isTeacherOfCourse(courseId) || isSuperAdmin());
        allow create, update, delete: if isSuperAdmin() || isTeacherOfCourse(courseId);
      }

      // Assignments Subcollection
      match /assignments/{assignmentId} {
        allow read: if isAuthenticated() && (isEnrolledInCourse(courseId) || isTeacherOfCourse(courseId) || isSuperAdmin());
        allow create, update, delete: if isSuperAdmin() || isTeacherOfCourse(courseId);

        // Submissions Sub-Subcollection
        match /submissions/{submissionId} {
          allow read: if isAuthenticated() && (isSuperAdmin() || isTeacherOfCourse(courseId) || request.auth.uid == resource.data.studentId);
          allow create: if isAuthenticated() && isStudent() && isEnrolledInCourse(courseId) && request.auth.uid == request.resource.data.studentId;
          allow update: if isAuthenticated() && (isSuperAdmin() || isTeacherOfCourse(courseId)); // For grading. Student edits usually not allowed post-submit.
          allow delete: if isSuperAdmin() || isTeacherOfCourse(courseId); // Teacher or admin can delete submissions.
        }
      }
    }

    // AttendanceRecords Collection (Top-level)
    match /attendanceRecords/{recordId} {
      // To check course specific permissions, record must contain courseId
      // let courseId = resource.data.courseId;
      allow read: if isAuthenticated(); // Simplified: any authenticated user. Could be refined based on roles.
                     // e.g., isStudent() && resource.data.studentId == request.auth.uid (student sees own)
                     // OR (isTeacher() && isTeacherOfCourse(resource.data.courseId)) (teacher sees for their course)
                     // OR isSuperAdmin() (admin sees all)
      allow create, update: if isSuperAdmin() || isTeacher(); // Teachers/Admins can create/update.
      allow delete: if isSuperAdmin();
    }

    // Payments Collection (Top-level)
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && (isSuperAdmin() || request.auth.uid == resource.data.studentId);
      allow create, update, delete: if isSuperAdmin(); // Only SuperAdmins manage payments.
    }

    // Notifications Collection (Top-level)
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (isSuperAdmin() || request.auth.uid == resource.data.userId || resource.data.userId == null); // Admin, target user, or global notification
      allow create: if isSuperAdmin() || isTeacher(); // System/Teacher/Admin generated.
      allow update: if isAuthenticated() && request.auth.uid == resource.data.userId; // User marking their own notification as read.
      allow delete: if isSuperAdmin() || (isAuthenticated() && request.auth.uid == resource.data.userId); // Admin or user deleting their own.
    }

    // Announcements Collection (Top-level)
    match /announcements/{announcementId} {
      allow read: if true; // Announcements are generally public.
      allow create, update, delete: if isSuperAdmin();
    }

    // Enrollments Collection (Top-level)
    // Direct writes might be restricted; often managed via backend functions or admin actions.
    match /enrollments/{enrollmentId} {
      allow read: if isAuthenticated();
      allow create: if isSuperAdmin() || isTeacher(); // Admin or Teacher can enroll students.
      allow delete: if isSuperAdmin() || isTeacher(); // Admin or Teacher can unenroll.
    }
  }
}
