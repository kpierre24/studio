
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isSuperAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'SuperAdmin';
    }

    function isTeacher() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Teacher';
    }

    function isStudent() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Student';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isAuthenticated(); // All authenticated users can read user profiles (e.g., for names, avatars)
      allow create: if isSuperAdmin(); // Only SuperAdmin can create new user documents directly (students register via auth)
      allow update: if isSuperAdmin() || isOwner(userId); // SuperAdmin or the user themselves can update
      allow delete: if isSuperAdmin(); // Only SuperAdmin can delete user documents
    }

    // Courses Collection
    match /courses/{courseId} {
      allow read: if isAuthenticated(); // All authenticated users can read course details
      allow create: if isSuperAdmin() || isTeacher(); // SuperAdmin or Teacher can create courses
      allow update: if isSuperAdmin() || (isTeacher() && resource.data.teacherId == request.auth.uid); // SuperAdmin or the assigned teacher can update
      allow delete: if isSuperAdmin(); // Only SuperAdmin can delete courses

      // Lessons Subcollection
      match /lessons/{lessonId} {
        allow read: if isAuthenticated(); // Or more specific: if user is enrolled or teacher
        allow create, update, delete: if isSuperAdmin() || (isTeacher() && get(/databases/$(database)/documents/courses/$(courseId)).data.teacherId == request.auth.uid);
      }

      // Assignments Subcollection
      match /assignments/{assignmentId} {
        allow read: if isAuthenticated(); // Or more specific: if user is enrolled or teacher
        allow create, update, delete: if isSuperAdmin() || (isTeacher() && get(/databases/$(database)/documents/courses/$(courseId)).data.teacherId == request.auth.uid);

        // Submissions Subcollection (under Assignments)
        match /submissions/{submissionId} {
          allow read: if isSuperAdmin() || (isTeacher() && get(/databases/$(database)/documents/courses/$(courseId)).data.teacherId == request.auth.uid) || (isStudent() && resource.data.studentId == request.auth.uid);
          allow create: if isStudent() && request.resource.data.studentId == request.auth.uid; // Students can create their own submissions
          allow update: if isSuperAdmin() || (isTeacher() && get(/databases/$(database)/documents/courses/$(courseId)).data.teacherId == request.auth.uid); // Teachers/Admins can update (e.g., grade)
          // allow delete: if isSuperAdmin(); // Or teacher of the course
        }
      }
    }

    // Enrollments Collection
    match /enrollments/{enrollmentId} {
      allow read: if isAuthenticated() && (isSuperAdmin() || isTeacher() || request.auth.uid == resource.data.studentId);
      // Teachers might need a more specific rule to only read enrollments for their courses, if listing all enrollments directly.
      // Example: isTeacher() && get(/databases/$(database)/documents/courses/$(resource.data.courseId)).data.teacherId == request.auth.uid
      allow list: if isAuthenticated(); // Admins or specific logic for teachers
      allow create, update, delete: if isSuperAdmin() || isTeacher(); // Admin/Teacher managed enrollments
    }

    // AttendanceRecords Collection
    match /attendanceRecords/{attendanceRecordId} {
      allow read: if isAuthenticated(); // Students can read their own, teachers their courses, admin all
      // More specific read: isSuperAdmin() || (isTeacher() && get(/databases/$(database)/documents/courses/$(resource.data.courseId)).data.teacherId == request.auth.uid) || (isStudent() && resource.data.studentId == request.auth.uid)
      allow create, update, delete: if isSuperAdmin() || isTeacher(); // Teachers manage attendance for their courses
    }

    // Payments Collection
    match /payments/{paymentId} {
      allow read: if isSuperAdmin() || (isStudent() && resource.data.studentId == request.auth.uid);
      // Teachers could potentially view payments for students in their courses if needed.
      // Example: (isTeacher() && get(/databases/$(database)/documents/courses/$(resource.data.courseId)).data.teacherId == request.auth.uid && get(/databases/$(database)/documents/courses/$(resource.data.courseId)).data.studentIds.hasAny([resource.data.studentId]))
      allow list: if isSuperAdmin(); // Only SuperAdmins list all payments directly
      allow create, update, delete: if isSuperAdmin(); // Only SuperAdmins manage payment records directly
    }

    // Notifications Collection (Consider user-specific subcollections or strict query rules if sensitive)
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.userId); // Users can only read their own notifications
      allow create: if isAuthenticated(); // System or other users can create notifications (e.g., teacher notifying student)
      allow update: if isOwner(resource.data.userId); // User can update their own (e.g., mark as read)
      allow delete: if isOwner(resource.data.userId); // User can delete their own
    }

    // Announcements Collection
    match /announcements/{announcementId} {
      allow read: if isAuthenticated(); // All authenticated users can read announcements
      allow create, update, delete: if isSuperAdmin() || isTeacher(); // Only SuperAdmin or teachers can manage announcements
    }

    // DirectMessages Collection
    match /directMessages/{messageId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.recipientId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.senderId; // Can only send as yourself
      allow update: if isAuthenticated() && request.auth.uid == resource.data.recipientId && request.resource.data.read == true && resource.data.read == false; // Only recipient can mark as read
      // allow delete: if false; // Typically, messages are not deleted or soft-deleted
    }
  }
}
