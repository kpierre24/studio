
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    // Function to get the role of the currently authenticated user
    function getUserRole() {
      if (isAuthenticated() &&
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role != null) {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      }
      return null;
    }

    function isSuperAdmin() {
      return getUserRole() == 'SuperAdmin';
    }

    function isTeacher() {
      return getUserRole() == 'Teacher';
    }

    function isStudent() {
      return getUserRole() == 'Student';
    }

    // Function to check if the current user is the teacher of a specific course
    function isTeacherOfCourse(courseId) {
      if (!isAuthenticated()) {
        return false;
      }
      if (exists(/databases/$(database)/documents/courses/$(courseId))) {
        return get(/databases/$(database)/documents/courses/$(courseId)).data.teacherId == request.auth.uid;
      }
      return false;
    }

    // Function to check if the current user is enrolled in a specific course
    function isEnrolledInCourse(courseId) {
      if (!isAuthenticated()) {
        return false;
      }
      // Ensure the path to studentIds is correct based on your data structure
      if (exists(/databases/$(database)/documents/courses/$(courseId)) &&
          get(/databases/$(database)/documents/courses/$(courseId)).data.studentIds != null) {
        return request.auth.uid in get(/databases/$(database)/documents/courses/$(courseId)).data.studentIds;
      }
      return false;
    }

    // Function to check if the user owns the document based on a userId field in the document
    function isDocumentOwner(docUserId) {
      return isAuthenticated() && request.auth.uid == docUserId;
    }

    // --- Collection Rules ---

    // Users Collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isSuperAdmin());
      allow create: if isSuperAdmin(); // Typically student registration is via backend/functions
      allow update: if (isAuthenticated() && request.auth.uid == userId && request.resource.data.keys().hasOnly(['name', 'avatarUrl'])) || isSuperAdmin();
      allow delete: if isSuperAdmin() && request.auth.uid != userId; // Prevent self-delete by admin here for safety
    }

    // Courses Collection
    match /courses/{courseId} {
      allow read: if isAuthenticated();
      allow create: if isSuperAdmin() || isTeacher();
      allow update: if isSuperAdmin() || isTeacherOfCourse(courseId);
      allow delete: if isSuperAdmin();

      // Lessons Subcollection
      match /lessons/{lessonId} {
        allow read: if isSuperAdmin() || isTeacherOfCourse(courseId) || isEnrolledInCourse(courseId);
        allow write: if isSuperAdmin() || isTeacherOfCourse(courseId); // Covers create, update, delete
      }

      // Assignments Subcollection
      match /assignments/{assignmentId} {
        allow read: if isSuperAdmin() || isTeacherOfCourse(courseId) || isEnrolledInCourse(courseId);
        allow write: if isSuperAdmin() || isTeacherOfCourse(courseId);

        // Submissions Sub-Subcollection
        match /submissions/{submissionId} {
          allow read: if isSuperAdmin() || isTeacherOfCourse(courseId) || (isStudent() && resource.data.studentId == request.auth.uid);
          allow create: if isStudent() && isEnrolledInCourse(courseId) && request.resource.data.studentId == request.auth.uid;
          allow update: if isSuperAdmin() || isTeacherOfCourse(courseId) || (isStudent() && resource.data.studentId == request.auth.uid); // Add field restrictions
          allow delete: if isSuperAdmin() || isTeacherOfCourse(courseId);
        }
      }
    }

    // Enrollments Collection
    match /enrollments/{enrollmentId} {
      allow read: if isSuperAdmin() || (isAuthenticated() && request.auth.uid == resource.data.studentId) || isTeacherOfCourse(resource.data.courseId);
      allow write: if isSuperAdmin() || (isTeacher() && isTeacherOfCourse(request.resource.data.courseId));
    }

    // AttendanceRecords Collection
    match /attendanceRecords/{recordId} {
      allow read: if isSuperAdmin() || isTeacherOfCourse(resource.data.courseId) || (isStudent() && resource.data.studentId == request.auth.uid);
      allow write: if isSuperAdmin() || isTeacherOfCourse(request.resource.data.courseId);
    }

    // Payments Collection
    match /payments/{paymentId} {
      allow read: if isSuperAdmin() || (isStudent() && resource.data.studentId == request.auth.uid);
      allow write: if isSuperAdmin();
    }

    // Notifications Collection
    match /notifications/{notificationId} {
      allow read: if isSuperAdmin() || (resource.data.userId == null && isAuthenticated()) || isDocumentOwner(resource.data.userId);
      allow write: if isSuperAdmin(); // Typically created by backend/functions
    }
    
    // Announcements Collection
    match /announcements/{announcementId} {
        allow read: if isAuthenticated() && (
                        isSuperAdmin() ||
                        (resource.data.userId == null && resource.data.courseId == null) || // General announcement
                        (resource.data.userId != null && request.auth.uid == resource.data.userId) || // User specific
                        (resource.data.courseId != null && (isTeacherOfCourse(resource.data.courseId) || isEnrolledInCourse(resource.data.courseId))) // Course specific
                      );
        allow write: if isSuperAdmin() || (isTeacher() && request.resource.data.courseId != null && isTeacherOfCourse(request.resource.data.courseId));
    }
  }
}

    