
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isSuperAdmin(userId) {
      return isSignedIn() && getUserRole(userId) == 'SuperAdmin';
    }

    function isTeacher(userId) {
      return isSignedIn() && getUserRole(userId) == 'Teacher';
    }

    function isStudent(userId) {
      return isSignedIn() && getUserRole(userId) == 'Student';
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getCourse(courseId) {
      return get(/databases/$(database)/documents/courses/$(courseId)).data;
    }

    function isTeacherOfCourse(courseId) {
      let course = getCourse(courseId);
      return isSignedIn() && request.auth.uid == course.teacherId;
    }

    function isEnrolledInCourse(courseId, userId) {
      let course = getCourse(courseId);
      // Ensure studentIds is a list before checking membership
      return isSignedIn() && course.studentIds is list && userId in course.studentIds;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isSignedIn();
      // Allow self-creation on signup or creation by SuperAdmin
      allow create: if isSuperAdmin(request.auth.uid) || 
                       (request.resource.data.email == request.auth.email && request.resource.data.id == request.auth.uid);
      allow update: if isOwner(userId) || isSuperAdmin(request.auth.uid);
      allow delete: if isSuperAdmin(request.auth.uid);
    }

    // Courses Collection
    match /courses/{courseId} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin(request.auth.uid) || isTeacher(request.auth.uid);
      allow update: if isSuperAdmin(request.auth.uid) || isTeacherOfCourse(courseId);
      allow delete: if isSuperAdmin(request.auth.uid);

      // Lessons Subcollection
      match /lessons/{lessonId} {
        allow read: if isSignedIn() && (
                        isSuperAdmin(request.auth.uid) ||
                        isTeacherOfCourse(courseId) ||
                        isEnrolledInCourse(courseId, request.auth.uid)
                      );
        allow create, update, delete: if isSuperAdmin(request.auth.uid) || isTeacherOfCourse(courseId);
      }

      // Assignments Subcollection
      match /assignments/{assignmentId} {
        allow read: if isSignedIn() && (
                        isSuperAdmin(request.auth.uid) ||
                        isTeacherOfCourse(courseId) ||
                        isEnrolledInCourse(courseId, request.auth.uid)
                      );
        allow create, update, delete: if isSuperAdmin(request.auth.uid) || isTeacherOfCourse(courseId);

        // Submissions Subcollection
        match /submissions/{submissionId} {
          allow read: if isSignedIn() && (
                          isSuperAdmin(request.auth.uid) ||
                          isTeacherOfCourse(courseId) ||
                          (isStudent(request.auth.uid) && request.auth.uid == resource.data.studentId)
                        );
          allow create: if isSignedIn() && (
                            isSuperAdmin(request.auth.uid) || // Admins can create/override
                            (isStudent(request.auth.uid) && request.auth.uid == request.resource.data.studentId && isEnrolledInCourse(courseId, request.auth.uid))
                          );
          allow update: if isSignedIn() && ( // Grading, feedback
                          isSuperAdmin(request.auth.uid) ||
                          isTeacherOfCourse(courseId)
                        );
          allow delete: if isSuperAdmin(request.auth.uid) || isTeacherOfCourse(courseId);
        }
      }
    }

    // Enrollments Collection
    match /enrollments/{enrollmentId} {
      allow read: if isSignedIn() && (
                      isSuperAdmin(request.auth.uid) ||
                      isOwner(resource.data.studentId) || // Student can read their own enrollment
                      isTeacherOfCourse(resource.data.courseId) // Teacher of the course can read
                    );
      // Create, Update, Delete only by SuperAdmin (as they manage via bulk enrollment page)
      allow create, update, delete: if isSuperAdmin(request.auth.uid);
    }

    // AttendanceRecords Collection
    match /attendanceRecords/{recordId} {
      allow read: if isSignedIn() && (
                      isSuperAdmin(request.auth.uid) ||
                      isOwner(resource.data.studentId) || // Student can read their own attendance
                      isTeacherOfCourse(resource.data.courseId) // Teacher of the course can read
                    );
      allow create, update, delete: if isSuperAdmin(request.auth.uid) || isTeacherOfCourse(resource.data.courseId);
    }

    // Payments Collection
    match /payments/{paymentId} {
      allow read: if isSignedIn() && (
                      isSuperAdmin(request.auth.uid) ||
                      isOwner(resource.data.studentId) || // Student can read their own payment records
                      isTeacherOfCourse(resource.data.courseId) // Teacher can see payments for their course
                    );
      // For now, only SuperAdmins can create, update, or delete payment records.
      allow create, update, delete: if isSuperAdmin(request.auth.uid);
    }

    // Notifications Collection
    match /notifications/{notificationId} {
      allow read, update: if isSignedIn() && isOwner(resource.data.userId); // User can read/update (mark as read) their own notifications
      // Creation is typically a side effect of other actions or done by privileged roles.
      // Deletion is for the user to manage their own notifications.
      allow create: if isSignedIn() && (isSuperAdmin(request.auth.uid) || isTeacher(request.auth.uid) || (request.resource.data.userId == request.auth.uid) ); 
      allow delete: if isSignedIn() && (isSuperAdmin(request.auth.uid) || isOwner(resource.data.userId));
    }

    // Announcements Collection
    match /announcements/{announcementId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isSuperAdmin(request.auth.uid) || isTeacher(request.auth.uid);
    }

    // DirectMessages Collection
    match /directMessages/{messageId} {
      allow read: if isSignedIn() && (request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.recipientId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.senderId;
      // Only recipient can mark as read. Only 'read' field can be changed.
      allow update: if isSignedIn() && request.auth.uid == resource.data.recipientId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']); 
      allow delete: if false; // Typically messages are not deleted by users, or soft-deleted.
    }
  }
}
