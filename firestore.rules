
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has a specific role
    function hasRole(userId, roleName) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == roleName;
    }

    // Helper function to check if a user is the teacher of a specific course
    function isTeacherOfCourse(courseId, userId) {
      return get(/databases/$(database)/documents/courses/$(courseId)).data.teacherId == userId;
    }

    // Helper function to check if a student is enrolled in a specific course
    function isStudentEnrolled(courseId, userId) {
      return userId in get(/databases/$(database)/documents/courses/$(courseId)).data.studentIds;
    }

    // Users collection
    match /users/{userId} {
      // Allow users to read their own profile
      allow read: if request.auth != null && request.auth.uid == userId;
      // Allow users to update their own profile (e.g., name, avatarUrl but not role or email through client)
      allow update: if request.auth != null && request.auth.uid == userId &&
                       !(request.resource.data.role != resource.data.role) &&
                       !(request.resource.data.email != resource.data.email);
      // SuperAdmins can read, create, update, delete any user profile
      allow read, write: if request.auth != null && hasRole(request.auth.uid, 'SuperAdmin');
    }

    // Courses collection
    match /courses/{courseId} {
      // Anyone authenticated can read course details
      allow read: if request.auth != null;
      // Only SuperAdmins or the teacher of the course can create/update/delete courses
      allow create, update, delete: if request.auth != null &&
                                       (hasRole(request.auth.uid, 'SuperAdmin') ||
                                        (hasRole(request.auth.uid, 'Teacher') && request.resource.data.teacherId == request.auth.uid) || // for create
                                        (hasRole(request.auth.uid, 'Teacher') && resource.data.teacherId == request.auth.uid) // for update/delete
                                       );

      // Lessons subcollection
      match /lessons/{lessonId} {
        // Enrolled students, the teacher of the course, and SuperAdmins can read lessons
        allow read: if request.auth != null &&
                       (hasRole(request.auth.uid, 'SuperAdmin') ||
                        isTeacherOfCourse(courseId, request.auth.uid) ||
                        isStudentEnrolled(courseId, request.auth.uid));
        // Only the teacher of the course or SuperAdmins can write lessons
        allow write: if request.auth != null &&
                        (hasRole(request.auth.uid, 'SuperAdmin') ||
                         isTeacherOfCourse(courseId, request.auth.uid));
      }

      // Assignments subcollection
      match /assignments/{assignmentId} {
        // Enrolled students, the teacher of the course, and SuperAdmins can read assignments
        allow read: if request.auth != null &&
                       (hasRole(request.auth.uid, 'SuperAdmin') ||
                        isTeacherOfCourse(courseId, request.auth.uid) ||
                        isStudentEnrolled(courseId, request.auth.uid));
        // Only the teacher of the course or SuperAdmins can write assignments
        allow write: if request.auth != null &&
                        (hasRole(request.auth.uid, 'SuperAdmin') ||
                         isTeacherOfCourse(courseId, request.auth.uid));

        // Submissions subcollection
        match /submissions/{submissionId} {
          // Students can read their own submissions
          // Teachers of the course and SuperAdmins can read all submissions for that assignment
          allow read: if request.auth != null &&
                         (hasRole(request.auth.uid, 'SuperAdmin') ||
                          isTeacherOfCourse(courseId, request.auth.uid) ||
                          (isStudentEnrolled(courseId, request.auth.uid) && resource.data.studentId == request.auth.uid));
          // Students can create/update their own submissions (update typically for resubmission if allowed)
          allow create: if request.auth != null &&
                           isStudentEnrolled(courseId, request.auth.uid) &&
                           request.resource.data.studentId == request.auth.uid;
          allow update: if request.auth != null &&
                           (
                             (isStudentEnrolled(courseId, request.auth.uid) && resource.data.studentId == request.auth.uid) || // Student updates own
                             isTeacherOfCourse(courseId, request.auth.uid) || // Teacher grades/provides feedback
                             hasRole(request.auth.uid, 'SuperAdmin') // Admin can update
                           ) &&
                           // Prevent student from changing their own grade or feedback
                           !(
                             isStudentEnrolled(courseId, request.auth.uid) &&
                             resource.data.studentId == request.auth.uid &&
                             (request.resource.data.grade != resource.data.grade ||
                              request.resource.data.feedback != resource.data.feedback)
                           );
          // Only SuperAdmins or the teacher might delete submissions (consider implications)
          allow delete: if request.auth != null &&
                           (hasRole(request.auth.uid, 'SuperAdmin') ||
                            isTeacherOfCourse(courseId, request.auth.uid));
        }
      }
      // Course Day Schedule subcollection
      match /schedule/{dateId} {
        allow read: if request.auth != null &&
                       (hasRole(request.auth.uid, 'SuperAdmin') ||
                        isTeacherOfCourse(courseId, request.auth.uid) ||
                        isStudentEnrolled(courseId, request.auth.uid));
        allow write: if request.auth != null &&
                        (hasRole(request.auth.uid, 'SuperAdmin') ||
                         isTeacherOfCourse(courseId, request.auth.uid));
      }
    }

    // Enrollments collection
    match /enrollments/{enrollmentId} {
      // SuperAdmins can read/write all enrollments
      // Teachers can read enrollments for their courses
      // Students can read their own enrollment records
      allow read: if request.auth != null &&
                     (hasRole(request.auth.uid, 'SuperAdmin') ||
                      (hasRole(request.auth.uid, 'Teacher') && isTeacherOfCourse(resource.data.courseId, request.auth.uid)) ||
                      resource.data.studentId == request.auth.uid);
      allow write: if request.auth != null && hasRole(request.auth.uid, 'SuperAdmin');
    }

    // AttendanceRecords collection
    match /attendanceRecords/{recordId} {
      allow read: if request.auth != null &&
                    (
                      hasRole(request.auth.uid, 'SuperAdmin') ||
                      (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Teacher' && isTeacherOfCourse(resource.data.courseId, request.auth.uid)) ||
                      resource.data.studentId == request.auth.uid
                    );
      allow write: if request.auth != null && // Covers create, update, delete
                     (
                       hasRole(request.auth.uid, 'SuperAdmin') ||
                       (
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Teacher' &&
                         isTeacherOfCourse(request.resource.data.courseId, request.auth.uid) &&
                         request.resource.data.courseId != null && // Ensure courseId is part of the new data
                         request.resource.data.studentId != null && // Ensure studentId is part of the new data
                         request.resource.data.date != null // Ensure date is part of the new data
                       )
                     );
    }


    // Payments collection
    match /payments/{paymentId} {
      // SuperAdmins can read/write all payments
      // Students can read their own payment records
      allow read: if request.auth != null &&
                     (hasRole(request.auth.uid, 'SuperAdmin') ||
                      resource.data.studentId == request.auth.uid);
      allow write: if request.auth != null && hasRole(request.auth.uid, 'SuperAdmin');
    }

    // Notifications collection
    match /notifications/{notificationId} {
      // Users can read their own notifications
      // SuperAdmins can read all notifications
      allow read: if request.auth != null &&
                     (hasRole(request.auth.uid, 'SuperAdmin') ||
                      resource.data.userId == request.auth.uid);
      // Users can update (mark as read) or delete their own notifications
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      // SuperAdmins can create notifications (or this might be done via Admin SDK / Cloud Functions)
      allow create: if request.auth != null && hasRole(request.auth.uid, 'SuperAdmin');
    }

    // Announcements collection
    match /announcements/{announcementId} {
      // Authenticated users can read announcements
      allow read: if request.auth != null;
      // Only SuperAdmins can create, update, or delete announcements
      allow write: if request.auth != null && hasRole(request.auth.uid, 'SuperAdmin');
    }

    // Discussion posts collection
    match /discussionPosts/{postId} {
      allow read: if request.auth != null &&
                     (hasRole(request.auth.uid, 'SuperAdmin') ||
                      isTeacherOfCourse(resource.data.courseId, request.auth.uid) ||
                      isStudentEnrolled(resource.data.courseId, request.auth.uid));
      allow create: if request.auth != null &&
                       (hasRole(request.auth.uid, 'SuperAdmin') ||
                        isTeacherOfCourse(request.resource.data.courseId, request.auth.uid) ||
                        isStudentEnrolled(request.resource.data.courseId, request.auth.uid)) &&
                       request.resource.data.authorId == request.auth.uid;
      allow update: if request.auth != null &&
                       (hasRole(request.auth.uid, 'SuperAdmin') ||
                        resource.data.authorId == request.auth.uid) &&
                       !('courseId' in request.resource.data) && // Prevent changing course
                       !('authorId' in request.resource.data) && // Prevent changing author
                       !('createdAt' in request.resource.data); // Prevent changing creation time
      allow delete: if request.auth != null &&
                       (hasRole(request.auth.uid, 'SuperAdmin') ||
                        resource.data.authorId == request.auth.uid);
    }

    // Discussion replies collection (subcollection of posts)
    match /discussionPosts/{postId}/replies/{replyId} {
      allow read: if request.auth != null &&
                     get(/databases/$(database)/documents/discussionPosts/$(postId)).data.courseId != null && // Ensure parent post exists
                     (hasRole(request.auth.uid, 'SuperAdmin') ||
                      isTeacherOfCourse(get(/databases/$(database)/documents/discussionPosts/$(postId)).data.courseId, request.auth.uid) ||
                      isStudentEnrolled(get(/databases/$(database)/documents/discussionPosts/$(postId)).data.courseId, request.auth.uid));
      allow create: if request.auth != null &&
                       get(/databases/$(database)/documents/discussionPosts/$(postId)).data.courseId != null &&
                       (hasRole(request.auth.uid, 'SuperAdmin') ||
                        isTeacherOfCourse(get(/databases/$(database)/documents/discussionPosts/$(postId)).data.courseId, request.auth.uid) ||
                        isStudentEnrolled(get(/databases/$(database)/documents/discussionPosts/$(postId)).data.courseId, request.auth.uid)) &&
                       request.resource.data.authorId == request.auth.uid;
      allow update: if request.auth != null &&
                       (hasRole(request.auth.uid, 'SuperAdmin') ||
                        resource.data.authorId == request.auth.uid) &&
                       !('postId' in request.resource.data) && // Prevent changing post
                       !('authorId' in request.resource.data) && // Prevent changing author
                       !('createdAt' in request.resource.data); // Prevent changing creation time
      allow delete: if request.auth != null &&
                       (hasRole(request.auth.uid, 'SuperAdmin') ||
                        resource.data.authorId == request.auth.uid);
    }

    // DirectMessages collection
    match /directMessages/{messageId} {
        allow read: if request.auth != null &&
                       (resource.data.senderId == request.auth.uid ||
                        resource.data.recipientId == request.auth.uid ||
                        hasRole(request.auth.uid, 'SuperAdmin')); // Admins can read for moderation
        allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid;
        allow update: if request.auth != null && resource.data.recipientId == request.auth.uid &&
                         request.resource.data.read == true && // Only allow marking as read by recipient
                         !('content' in request.resource.data) && // Cannot change content
                         !('senderId' in request.resource.data) && // Cannot change sender
                         !('recipientId' in request.resource.data); // Cannot change recipient
        // Delete might be restricted or admin-only based on policy
        allow delete: if request.auth != null && hasRole(request.auth.uid, 'SuperAdmin');
    }

  }
}
