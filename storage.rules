
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o { // Default bucket match

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    // Function to check if the user has a specific role
    function hasRole(role) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isSuperAdmin() {
      return hasRole('SuperAdmin');
    }

    function isTeacher() {
      return hasRole('Teacher');
    }

    function isStudent() {
      return hasRole('Student');
    }

    // Function to check if the current user is the teacher of a specific course
    // courseId must be passed as a string argument from the calling rule
    function isTeacherOfCourse(courseId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/courses/$(courseId)) &&
             get(/databases/$(database)/documents/courses/$(courseId)).data.teacherId == request.auth.uid;
    }

    // Function to check if the current user is enrolled in a specific course
    // courseId must be passed as a string argument from the calling rule
    function isEnrolledInCourse(courseId) {
      let courseDoc = get(/databases/$(database)/documents/courses/$(courseId));
      return isAuthenticated() &&
             courseDoc.data != null && // Check if course document exists
             courseDoc.data.studentIds != null && // Check if studentIds field exists
             request.auth.uid in courseDoc.data.studentIds; // Assumes studentIds is a list
    }

    // --- Rules for User Avatars ---
    // Path: /users/{userId}/avatar/{fileName}
    match /users/{userId}/avatar/{fileName} {
      allow read: if true; // Avatars are generally public

      allow write: if isAuthenticated() && request.auth.uid == userId;
        // Optional: Add file size and type checks
        // && request.resource.size < 5 * 1024 * 1024 // Max 5MB
        // && request.resource.contentType.matches('image/.*');
    }

    // --- Rules for Lesson Files ---
    // Path: /courses/{courseId}/lessons/{lessonId}/{fileName}
    match /courses/{courseId}/lessons/{lessonId}/{fileName} {
      allow read: if isAuthenticated() && (isTeacherOfCourse(courseId) || isEnrolledInCourse(courseId) || isSuperAdmin());

      allow write: if isAuthenticated() && (isTeacherOfCourse(courseId) || isSuperAdmin());
        // Optional: Add file size and type checks for lesson materials
        // && request.resource.size < 20 * 1024 * 1024 // Max 20MB
        // && (request.resource.contentType.matches('application/pdf') ||
        //     request.resource.contentType.matches('image/.*') ||
        //     request.resource.contentType.matches('video/.*') ||
        //     request.resource.contentType.matches('text/plain'));
    }

    // --- Rules for Assignment Files (e.g., if assignments themselves have associated files) ---
    // Path: /courses/{courseId}/assignments/{assignmentId}/materials/{fileName}
    match /courses/{courseId}/assignments/{assignmentId}/materials/{fileName} {
      allow read: if isAuthenticated() && (isTeacherOfCourse(courseId) || isEnrolledInCourse(courseId) || isSuperAdmin());

      allow write: if isAuthenticated() && (isTeacherOfCourse(courseId) || isSuperAdmin());
        // Optional: Add file size and type checks
    }

    // --- Rules for Student Assignment Submissions ---
    // Path: /courses/{courseId}/assignments/{assignmentId}/submissions/{studentId}/{fileName}
    match /courses/{courseId}/assignments/{assignmentId}/submissions/{studentId}/{fileName} {
      allow read: if isAuthenticated() &&
                     (request.auth.uid == studentId || isTeacherOfCourse(courseId) || isSuperAdmin());

      allow write: if isAuthenticated() && request.auth.uid == studentId && isEnrolledInCourse(courseId);
        // Students can only write (submit) to their own submission path if enrolled.
        // Optional: Add file size and type checks
        // && request.resource.size < 10 * 1024 * 1024 // Max 10MB
    }

    // --- Default Deny ---
    // It's good practice to ensure any path not explicitly matched is denied.
    // However, Storage rules are implicitly deny-all if no rule matches.
    // Explicitly, you could add:
    // match /{allPaths=**} {
    //   allow read, write: if false;
    // }
    // But this is usually not necessary if your specific paths are well-defined.

  }
}
